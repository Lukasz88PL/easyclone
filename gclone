#!/usr/bin/env bash
#=============================================================
# https://github.com/xd003/clone
# File Name: clone
# Author: xd003
# Description: Clone bash script to be used for common fclone/gclone operations
# System Supported: Arch , Ubuntu/Debian , Fedora & Termux ( amd64 & arm64 )
#=============================================================

# Function to print colored output
cecho() {
    local color_code="\033["
    case "$1" in
        black | bk) color="${color_code}0;30m" ;;
        red | r) color="${color_code}1;31m" ;;
        green | g) color="${color_code}1;32m" ;;
        yellow | y) color="${color_code}1;33m" ;;
        blue | b) color="${color_code}1;34m" ;;
        purple | p) color="${color_code}1;35m" ;;
        cyan | c) color="${color_code}1;36m" ;;
        gray | gr) color="${color_code}0;37m" ;;
        *) local text="$1" ;;
    esac
    [ -z "$text" ] && local text="$color$2${color_code}0m"
    echo -e "$text"
}

# Configuration
CONFIG_FILE="$HOME/easyclone/rc.conf"
LOG_FILE="$HOME/easyclone/log.txt"
HOME_DIR="$(echo $HOME)"
GCLONE_FLAGS="--fast-list --drive-server-side-across-configs --drive-acknowledge-abuse --drive-keep-revision-forever --stats=10s -vP --drive-use-trash=false --drive-stop-on-upload-limit --user-agent randomstringxyz --log-file $LOG_FILE"

# Function to select source folder
select_source_folder() {
    : > $LOG_FILE
    sed -i '/^team_drive/d' $CONFIG_FILE
    sed -i '/^root_folder_id/d' $CONFIG_FILE
    cecho b "[When you need to enter folder id/url, you can enter 'b' to choose a folder id from your bookmark.txt]"
    read -e -p "Enter the source folder id or url: " src_folder
    if [ "$src_folder" == "b" ]; then
        cat $HOME/easyclone/bookmark.txt | nl -w1 -s'• '
        echo
        read -e -p "Enter the number corresponding to the folder_id which you want to use: " num
        src_folder="$(cat $HOME/easyclone/bookmark.txt | awk 'NF>1{print $NF}' | sed "${num}q;d")"
    else
        src_folder=$(echo $src_folder | sed -E 's~.*[/=]([01A-Z][-_[:alnum:]]+)([?/].*|$)~\1~')
    fi
    case $src_folder in
        0*)
            sed -i "4iteam_drive = $src_folder" $CONFIG_FILE
            ;;
        1*)
            sed -i "4iroot_folder_id = $src_folder" $CONFIG_FILE
            ;;
    esac
    sed -ri "5s/[[:digit:]]+.json/$(shuf -i 1-$(ls -l $HOME/easyclone/accounts | egrep -c '^-') -n 1).json/" $CONFIG_FILE
}

# Function to select destination folder
select_destination_folder() {
    read -e -p "Enter the destination folder id or url: " dst_folder
    if [ "$dst_folder" == "b" ]; then
        cat $HOME/easyclone/bookmark.txt | nl -w1 -s'• '
        echo
        read -e -p "Enter the number corresponding to the folder_id which you want to use: " num
        dst_folder="$(cat $HOME/easyclone/bookmark.txt | awk 'NF>1{print $NF}' | sed "${num}q;d")"
    else
        dst_folder=$(echo $dst_folder | sed -E 's~.*[/=]([01A-Z][-_[:alnum:]]+)([?/].*|$)~\1~')
    fi
    case $dst_folder in
        0*)
            sed -i "11iteam_drive = $dst_folder" $CONFIG_FILE
            ;;
        1*)
            sed -i "11iroot_folder_id = $dst_folder" $CONFIG_FILE
            ;;
    esac
    sed -ri "12s/[[:digit:]]+.json/$(shuf -i 1-$(ls -l $HOME/easyclone/accounts | egrep -c '^-') -n 1).json/" $CONFIG_FILE
}

# Function to install gclone
install_gclone() {
    if ! command -v gclone > /dev/null; then
        cecho r "gclone is not installed. Please run the setup script to install it."
        exit 1
    fi
}

# Function to handle logging
log() {
    local level="$1"
    local message="$2"
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] [$level] $message" >> $LOG_FILE
}

# Main script
while true; do
    cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) Copy
┋    (Copy files from source to dest, skipping already copied)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) Move
┋    (Move files from source to dest, skipping already moved)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) Sync
┋    (Make source and dest identical, modifying destination only)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) Dedupe
┋    (Find duplicate files and delete/rename them)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋5) Size
┋    (Return the total size and number of objects)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋6) Listing
┋    (List all the files and folders)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋7) NCDU
┋    (Explore directory with text based UI)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋8) Upload | Download
┋    (Move , Copy or Sync Local Folder to Drive OR Download files locally)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋9) Empty Trash
┋    (You need to have Manager Permission in TD)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋10) Delete Empty Folders
┋    (Delete all Empty Folders recursively)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋11) Check
┋    (Check if the files in the source and destination match)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋12) Delete
┋    (Delete a file or a folder along with its content)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋13) Quit
┋    (Exit the Script)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF

    echo
    read -e -p "Enter your input: " user_input
    echo

    case $user_input in
        1)
            cecho y "Copy option has been selected"
            select_source_folder
            select_destination_folder
            echo
            cecho b "Do you want to use --ignore-existing flag for this process?"
            cecho b "[Only use it if your source/destination doesn't contain modification of any file overwritten with same name as even after having different size they will be considered equal and ignored]"
            read -e -p "Enter Your Input [y/n]: " ignore_existing
            case $ignore_existing in
                [Yy]*)
                    gclone --config=$CONFIG_FILE copy src: dst: $GCLONE_FLAGS --ignore-existing
                    ;;
                [Nn]*)
                    gclone --config=$CONFIG_FILE copy src: dst: $GCLONE_FLAGS
                    ;;
            esac
            ;;
        2)
            cecho y "Move option has been selected"
            select_source_folder
            select_destination_folder
            echo
            cecho b "Do you want to use --ignore-existing flag for this process?"
            cecho b "[Only use it if your source/destination doesn't contain modification of any file overwritten with same name as even after having different size they will be considered equal and ignored]"
            read -e -p "Enter Your Input [y/n]: " ignore_existing
            case $ignore_existing in
                [Yy]*)
                    gclone --config=$CONFIG_FILE move src: dst: $GCLONE_FLAGS --delete-empty-src-dirs --ignore-existing
                    ;;
                [Nn]*)
                    gclone --config=$CONFIG_FILE move src: dst: $GCLONE_FLAGS --delete-empty-src-dirs
                    ;;
            esac
            ;;
        3)
            cecho y "Sync option has been selected"
            select_source_folder
            select_destination_folder
            echo
            cecho b "Do you want to use --ignore-existing flag for this process?"
            cecho b "[Only use it if your source/destination doesn't contain modification of any file overwritten with same name as even after having different size they will be considered equal and ignored]"
            read -e -p "Enter Your Input [y/n]: " ignore_existing
            case $ignore_existing in
                [Yy]*)
                    gclone --config=$CONFIG_FILE sync src: dst: $GCLONE_FLAGS --ignore-existing
                    ;;
                [Nn]*)
                    gclone --config=$CONFIG_FILE sync src: dst: $GCLONE_FLAGS
                    ;;
            esac
            ;;
        4)
            cecho y "Dedupe option has been selected"
            cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) Interactive
┋    (Use Dedupe Interactively)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) Skip
┋    (Removes identical files then skips anything left)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) First
┋    (Removes identical files then keeps the first one)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) Newest
┋    (Removes identical files then keeps the newest one)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋5) Oldest
┋    (removes identical files then keeps the oldest one)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋6) Largest
┋    (removes identical files then keeps the largest one)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋7) Smallest
┋    (removes identical files then keeps the smallest one)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋8) Rename
┋    (removes identical files then renames the rest to be different)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋9) Return to Main Menu
┋    (Restart the script from Main Menu)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF
            echo
            read -e -p "Enter the Dedupe Operation Mode (1-9): " dedupe_mode
            if [[ $dedupe_mode -ne 9 ]]; then
                select_source_folder
            fi
            case $dedupe_mode in
                1)
                    cecho b "Dedupe Interactive option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode interactive src: --fast-list --verbose=2
                    ;;
                2)
                    cecho b "Dedupe Skip option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode skip src: --fast-list --verbose=2
                    ;;
                3)
                    cecho b "Dedupe First option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode first src: --fast-list --verbose=2
                    ;;
                4)
                    cecho b "Dedupe Newest option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode newest src: --fast-list --verbose=2
                    ;;
                5)
                    cecho b "Dedupe Oldest option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode oldest src: --fast-list --verbose=2
                    ;;
                6)
                    cecho b "Dedupe Largest option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode largest src: --fast-list --verbose=2
                    ;;
                7)
                    cecho b "Dedupe Smallest option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode smallest src: --fast-list --verbose=2
                    ;;
                8)
                    cecho b "Dedupe Rename option has been selected"
                    gclone --config=$CONFIG_FILE dedupe --dedupe-mode rename src: --fast-list --verbose=2
                    ;;
                9)
                    continue
                    ;;
            esac
            ;;
        5)
            cecho y "Size option has been selected"
            select_source_folder
            gclone --config=$CONFIG_FILE size src: --fast-list
            ;;
        6)
            cecho y "Listing option has been selected"
            cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) ls
┋    (List the objects in the path with size and path)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) lsd
┋    (List all directories/containers/buckets in the path)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) lsf
┋    (List directories and objects in remote:path formatted for parsing)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) lsjson
┋    (List directories and objects in the path in JSON format)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋5) lsl
┋    (List the objects in path with modification time, size and path)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋6) tree
┋    (List the contents of the remote in a tree like fashion)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋7) Return to Main Menu
┋    (Restart the script from Main Menu)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF
            echo
            read -e -p "Choose the listing type: " listing_type
            if [[ $listing_type -ne 7 ]]; then
                select_source_folder
            fi
            case $listing_type in
                1)
                    cecho b "Listing / ls option has been selected"
                    gclone --config=$CONFIG_FILE ls src:
                    ;;
                2)
                    cecho b "Listing / lsd option has been selected"
                    gclone --config=$CONFIG_FILE lsd src:
                    ;;
                3)
                    cecho b "Listing / lsf option has been selected"
                    gclone --config=$CONFIG_FILE lsf src:
                    ;;
                4)
                    cecho b "Listing / lsjson option has been selected"
                    gclone --config=$CONFIG_FILE lsjson src:
                    ;;
                5)
                    cecho b "Listing / lsl option has been selected"
                    gclone --config=$CONFIG_FILE lsl src:
                    ;;
                6)
                    cecho b "Listing / tree option has been selected"
                    gclone --config=$CONFIG_FILE tree src:
                    ;;
                7)
                    continue
                    ;;
            esac
            ;;
        7)
            cecho y "NCDU option has been selected"
            select_source_folder
            gclone --config=$CONFIG_FILE ncdu src: --fast-list 2>/dev/null
            ;;
        8)
            cecho y "Upload | Download option has been selected"
            cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) Upload + Copy
┋    (Copy file/folder locally to drive, skipping already copied)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) Upload + Move
┋    (Move file/folder locally to drive, skipping already moved)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) Upload + Sync
┋    (Make local and drive file/folder identical, modifying drive only)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) Download
┋    (Download content locally from Google Drive)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋5) Return to Main Menu
┋    (Restart the script from Main Menu)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF
            echo
            read -e -p "Choose the appropriate option: " upload_option
            if [[ $upload_option -ne 4 ]] && [[ $upload_option -ne 5 ]]; then
                read -e -p "Enter the path of the folder which you want to upload: " source_path
                source_path="$(eval echo "$source_path")"
                : > $LOG_FILE && sed -i '/^team_drive/d' $CONFIG_FILE && sed -i '/^root_folder_id/d' $CONFIG_FILE && select_destination_folder
            fi

            if [ "$upload_option" == "4" ]; then
                select_source_folder
                read -e -p "Enter the path where you want to download files locally: " destination_path
                destination_path="$(eval echo "$destination_path")"
            fi
            case $upload_option in
                1)
                    gclone --config=$CONFIG_FILE copy "$source_path" dst: $GCLONE_FLAGS
                    ;;
                2)
                    gclone --config=$CONFIG_FILE move "$source_path" dst: $GCLONE_FLAGS --delete-empty-src-dirs
                    ;;
                3)
                    gclone --config=$CONFIG_FILE sync "$source_path" dst: $GCLONE_FLAGS
                    ;;
                4)
                    gclone --config=$CONFIG_FILE copy src: "$destination_path" $GCLONE_FLAGS
                    ;;
                5)
                    continue
                    ;;
            esac
            ;;
        9)
            cecho y "Empty Trash option has been selected"
            select_source_folder
            gclone --config=$CONFIG_FILE delete src: --drive-trashed-only=true --drive-use-trash=false --fast-list --verbose=2
            log "INFO" "Trash emptied successfully"
            ;;
        10)
            cecho y "Delete Empty folders option has been selected"
            select_source_folder
            gclone --config=$CONFIG_FILE rmdirs src: --leave-root --fast-list
            log "INFO" "Empty folders deleted successfully"
            ;;
        11)
            cecho y "Check option has been selected"
            cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) Compare only Size
┋    (MD5/SHA1 is not considered here. Use this for a quick check)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) Compare Size + MD5 / SHA1 Hash
┋    (Compares sizes and hashes and logs report of unmatched files. Very slow process)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) Compare after Downloading data locally
┋    (Download data from both the directories and Compare them on the fly. Use only if remote doesn't support hashes)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) Return to Main Menu
┋    (Restart the script from Main Menu)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF
            echo
            read -e -p "Choose the Comparison Mode: " comparison_mode
            if [[ $comparison_mode -ne 4 ]]; then
                select_source_folder
                select_destination_folder
            fi
            case $comparison_mode in
                1)
                    cecho b "Check / Compare only size option has been selected"
                    gclone --config=$CONFIG_FILE check src: dst: -P --drive-server-side-across-configs --fast-list --size-only
                    log "INFO" "Comparison completed. Only file sizes were compared."
                    ;;
                2)
                    cecho b "Check / Compare size + MD5 option has been selected"
                    gclone --config=$CONFIG_FILE check src: dst: -P --drive-server-side-across-configs --fast-list
                    log "INFO" "Comparison completed. File sizes and MD5 hashes were compared."
                    ;;
                3)
                    cecho b "Check / Compare locally downloaded data option has been selected"
                    gclone --config=$CONFIG_FILE check src: dst: -P --drive-server-side-across-configs --fast-list --download
                    log "INFO" "Comparison completed. Files were downloaded and compared locally."
                    ;;
                4)
                    continue
                    ;;
            esac
            ;;
        12)
            cecho y "Delete option has been selected"
            cat << EOF
┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋1) Delete
┋    (Delete the contents of path)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋2) Deletefile
┋    (Delete a single file from path)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋3) Purge
┋    (Delete the path and its content)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
┋4) Return to Main Menu
┋    (Restart the script from Main Menu)
┋┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉
EOF
            echo
            read -e -p "Enter your input: " delete_option
            if [[ $delete_option -ne 4 ]]; then
                select_source_folder
            fi
            case $delete_option in
                1)
                    cecho b "Delete / Default option has been selected"
                    gclone --config=$CONFIG_FILE delete src: -vP --stats-one-line --stats=15s --fast-list
                    log "INFO" "Deletion completed successfully"
                    ;;
                2)
                    cecho b "Delete / Deletefile option has been selected"
                    gclone --config=$CONFIG_FILE deletefile src: -vP --stats-one-line --stats=15s --fast-list
                    log "INFO" "File deletion completed successfully"
                    ;;
                3)
                    cecho b "Delete / Purge option has been selected"
                    gclone --config=$CONFIG_FILE purge src: -vP --stats-one-line --stats=15s --fast-list
                    log "INFO" "Purge completed successfully"
                    ;;
                4)
                    continue
                    ;;
            esac
            ;;
        13)
            log "INFO" "Script execution completed"
            exit
            ;;
    esac
    if [[ "$?" ]]; then
        break
    fi
done
